// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Sys = require("bs-platform/lib/js/sys.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var Fs$1 = {};

var helpString = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

function toFileName(file) {
  if (file) {
    return "./done.txt";
  } else {
    return "./todo.txt";
  }
}

function readTodosFrom(filename) {
  if (!Fs.existsSync(filename)) {
    return [];
  }
  var text = Fs.readFileSync(filename, "utf-8");
  var lines = text.split(Os.EOL);
  return lines.filter(function (todo) {
              return todo !== "";
            });
}

function getTodosFrom(file) {
  return readTodosFrom(file ? "./done.txt" : "./todo.txt");
}

function addTodosTo(file, todo) {
  Fs.appendFileSync(file ? "./done.txt" : "./todo.txt", todo);
  
}

function overwriteTodosTo(file, todos) {
  Fs.writeFileSync(file ? "./done.txt" : "./todo.txt", "");
  todos.forEach(function (todo) {
        return addTodosTo(file, todo + "\n");
      });
  
}

var Todos = {
  toFileName: toFileName,
  readTodosFrom: readTodosFrom,
  getTodosFrom: getTodosFrom,
  addTodosTo: addTodosTo,
  overwriteTodosTo: overwriteTodosTo
};

function command(arg, cmd) {
  if (cmd === undefined) {
    return /* Help */0;
  }
  switch (cmd) {
    case "add" :
        return {
                TAG: /* Add */0,
                _0: arg
              };
    case "del" :
        return {
                TAG: /* Del */1,
                _0: Belt_Option.flatMap(arg, Belt_Int.fromString)
              };
    case "done" :
        return {
                TAG: /* Done */2,
                _0: Belt_Option.flatMap(arg, Belt_Int.fromString)
              };
    case "help" :
        return /* Help */0;
    case "ls" :
        return /* Ls */1;
    case "report" :
        return /* Report */2;
    default:
      return /* Help */0;
  }
}

var TodoCommands = {
  command: command
};

function help(param) {
  console.log(helpString);
  
}

function ls(param) {
  var todos = getTodosFrom(/* Todo */0);
  var size = todos.length;
  if (size > 0) {
    console.log(Belt_Array.reduceWithIndex(Belt_Array.reverse(todos), "", (function (acc, x, i) {
                return acc + ("[" + String(size - i | 0) + "] " + x + "\n");
              })));
  } else {
    console.log("There are no pending todos!");
  }
  
}

function add(todo) {
  if (todo !== undefined) {
    addTodosTo(/* Todo */0, todo + "\n");
    console.log("Added todo: \"" + todo + "\"");
  } else {
    console.log("Error: Missing todo string. Nothing added!");
  }
  
}

function del(todoId) {
  if (todoId !== undefined) {
    var todos = getTodosFrom(/* Todo */0);
    if (todoId > 0 && todoId <= todos.length) {
      todos.splice(todoId - 1 | 0, 1);
      overwriteTodosTo(/* Todo */0, todos);
      console.log("Deleted todo #" + Caml_array.get(Sys.argv, 3));
    } else {
      console.log("Error: todo #" + Caml_array.get(Sys.argv, 3) + " does not exist. Nothing deleted.");
    }
    return ;
  }
  console.log("Error: Missing NUMBER for deleting todo.");
  
}

function done(todoId) {
  if (todoId !== undefined) {
    var todos = getTodosFrom(/* Todo */0);
    if (todoId > 0 && todoId <= todos.length) {
      addTodosTo(/* Done */1, "x " + Curry._1(getToday, undefined) + " " + Caml_array.get(todos, todoId - 1 | 0) + "\n");
      todos.splice(todoId - 1 | 0, 1);
      overwriteTodosTo(/* Todo */0, todos);
      console.log("Marked todo #" + Caml_array.get(Sys.argv, 3) + " as done.");
    } else {
      console.log("Error: todo #" + Caml_array.get(Sys.argv, 3) + " does not exist.");
    }
    return ;
  }
  console.log("Error: Missing NUMBER for marking todo as done.");
  
}

function report(param) {
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(getTodosFrom(/* Todo */0).length) + " Completed : " + String(getTodosFrom(/* Done */1).length));
  
}

function $$do(cmd) {
  if (typeof cmd === "number") {
    switch (cmd) {
      case /* Help */0 :
          console.log(helpString);
          return ;
      case /* Ls */1 :
          return ls(undefined);
      case /* Report */2 :
          return report(undefined);
      
    }
  } else {
    switch (cmd.TAG | 0) {
      case /* Add */0 :
          return add(cmd._0);
      case /* Del */1 :
          return del(cmd._0);
      case /* Done */2 :
          return done(cmd._0);
      
    }
  }
}

var TodoManager = {
  $$do: $$do,
  help: help,
  ls: ls,
  add: add,
  del: del,
  done: done,
  report: report
};

var command$1 = Belt_Array.get(process.argv, 2);

var arg = Belt_Array.get(process.argv, 3);

$$do(command(arg, command$1));

exports.Fs = Fs$1;
exports.helpString = helpString;
exports.getToday = getToday;
exports.Todos = Todos;
exports.TodoCommands = TodoCommands;
exports.TodoManager = TodoManager;
exports.command = command$1;
exports.arg = arg;
/* command Not a pure module */
